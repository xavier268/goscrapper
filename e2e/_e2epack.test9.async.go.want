Test name : TestParserCompile
This file : _e2epack.test9.async.go.want
// Autogenerated file. DO NOT EDIT.
// Version: 0.3.5
// Date: n/a
// Built : n/a
// (c) Xavier Gandillot 2024

package e2epack
// Generated from test9.sc

import (
	"context"
	"github.com/go-rod/rod"
	"github.com/xavier268/goscrapper/rt"
)


type Input_test9_async struct {
	url string
	css string
}


type Output_test9_async struct {
	url string
}


// @url string
// @css string
// p1 = PAGE url
// p2 = PAGE (url + "/login")
// SELECT FROM PAGE url ALL css + ","+ css AS r WHERE true  LIMIT 2 + 3
//     SELECT FROM p1 ONE css AS el1
//         toto = "hello" + "world"
//         titi = ( el1 == el1)
//         SELECT FROM p1 ONE css AS el2
//             p3 = 23+4
//             tutu = (el1 == el2)
// 
// RETURN url
func DoAsync_test9_async(_ctx context.Context,_ch chan<- Output_test9_async,  _in Input_test9_async) (_err error) {
var _out Output_test9_async
var url string = _in.url ; _ = url
var css string = _in.css ; _ = css
// call to incOut
 _out = Output_test9_async{}
var p1 *rod.Page= rt.GetPage(url);_=p1
defer rt.ClosePage(p1)
var p2 *rod.Page= rt.GetPage((((url) + ("/login"))));_=p2
defer rt.ClosePage(p2)
_it007:=rt.NewSelectAllIterator(_ctx, rt.GetPage(url),((((css) + (","))) + (css)),((2) + (3))); 
for r, _ok007 := _it007.Next(); _ok007;r, _ok007 = _it007.Next(){_=r;
if (true) {continue;}
select{
case <- _ctx.Done():
if _err = _ctx.Err() ; _err != nil { return _err}
default: el1 := rt.SelectOne(p1,css);_=el1

var toto string= (("hello") + ("world"));_=toto
var titi bool= (((el1) == (el1)));_=titi
select{
case <- _ctx.Done():
if _err = _ctx.Err() ; _err != nil { return _err}
default: el2 := rt.SelectOne(p1,css);_=el2

var p3 int= ((23) + (4));_=p3
var tutu bool= (((el1) == (el2)));_=tutu
//call to saveOut
_out.url=url
select {case <- _ctx.Done():return _ctx.Err();case _ch <- _out:}
if _err = _ctx.Err() ; _err != nil { return _err}
// call to incOut
 _out = Output_test9_async{}
}
}
}
return _err
}

