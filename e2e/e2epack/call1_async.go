// Autogenerated file. DO NOT EDIT.
// Version: 0.3.5
// Date: n/a
// Built : n/a
// (c) Xavier Gandillot 2024

package e2epack
// Generated from call1.sc

import (
	"context"
	"fmt"
	"github.com/go-rod/rod"
	"github.com/xavier268/goscrapper/rt"
)


type Input_call1_async struct {
	a int
	b int
}


type Output_call1_async struct {
	c int
	url string
	t string
}


// @ a int
// @ b int
// url = "https://www.wikipedia.fr"
// 
// p = PAGE url
// 
// // ensure page is loaded
// SELECT FROM p ONE "div" AS found
// PRINT "Page was correctly loaded for "+ url
// 
// c = a + b
// 
// // capture five divs
// SELECT FROM p ALL "div" AS divel LIMIT 5
// PRINT "captured :"
// PRINT divel
// 
// t = TEXT divel
// 
// RETURN c, url, t
func DoAsync_call1_async(_ctx context.Context,_ch chan<- Output_call1_async,  _in Input_call1_async) (_err error) {
var _out Output_call1_async
var a int = _in.a ; _ = a
var b int = _in.b ; _ = b
// call to incOut
 _out = Output_call1_async{}
var url string= "https://www.wikipedia.fr";_=url
var p *rod.Page= rt.GetPage(url);_=p
defer rt.ClosePage(p)
select{
case <- _ctx.Done():
if _err = _ctx.Err() ; _err != nil { return _err}
default: found := rt.SelectOne(p,"div");_=found

fmt.Println((("Page was correctly loaded for ") + (url)))
var c int= ((a) + (b));_=c
_it005:=rt.NewSelectAllIterator(_ctx, p,"div",5); 
for divel, _ok005 := _it005.Next(); _ok005;divel, _ok005 = _it005.Next(){_=divel;
fmt.Println("captured :")
fmt.Println(divel)
var t string= rt.GetText(divel);_=t
//call to saveOut
_out.c=c
_out.t=t
_out.url=url
select {case <- _ctx.Done():return _ctx.Err();case _ch <- _out:}
if _err = _ctx.Err() ; _err != nil { return _err}
// call to incOut
 _out = Output_call1_async{}
}
}
return _err
}
