// Autogenerated file. DO NOT EDIT.
// Version: 0.3.4
// Date: n/a
// Built : n/a
// (c) Xavier Gandillot 2024

package e2epack
// Generated from C:\Users\xavie\Desktop\goscrapper\e2e\test4.sc

import (
	"context"
	"github.com/go-rod/rod"
	"github.com/xavier268/goscrapper/rt"
)


type Input_test4_async struct {
	a string
	b []string
}


type Output_test4_async struct {
	c string
	a string
	d string
}


// @a string
// @b [string]
// 
// // z = 2 // uncommenting this should fail because loop variable z would be redeclared 
// 
// 
// c = a  + a
// page = PAGE "google.com"
// 
// SELECT FROM page ALL a AS z WHERE 2+4==1 LIMIT 2+66 WHERE z == z
//     d = a + a
//     RETURN c,a,d
func DoAsync_test4_async(_ctx context.Context,_ch chan<- Output_test4_async,  _in Input_test4_async) (_err error) {
var _out Output_test4_async
var a string = _in.a ; _ = a
var b []string = _in.b ; _ = b
// call to incOut
 _out = Output_test4_async{}
var c string= ((a) + (a));_=c
var page *rod.Page= rt.GetPage("google.com");_=page
defer rt.ClosePage(page)
_it004:=rt.NewSelectAllIterator(_ctx, page,a,((2) + (66))); 
for z, _ok004 := _it004.Next(); _ok004;z, _ok004 = _it004.Next(){_=z;
if (((((2) + (4))) == (1))) {continue;}
if (((z) == (z))) {continue;}
var d string= ((a) + (a));_=d
//call to saveOut
_out.a=a
_out.c=c
_out.d=d
select {case <- _ctx.Done():return _err;case _ch <- _out:}
if _err = _ctx.Err() ; _err != nil { return _err}
// call to incOut
 _out = Output_test4_async{}
}
return _err
}
