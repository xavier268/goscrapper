// Autogenerated file. DO NOT EDIT.
// Version: 0.3.4
// Date: n/a
// Built : n/a
// (c) Xavier Gandillot 2024

package e2epack
// Generated from C:\Users\xavie\Desktop\goscrapper\e2e\test9.sc

import (
	"context"
	"github.com/go-rod/rod"
	"github.com/xavier268/goscrapper/rt"
)


type Input_test9_async struct {
	url string
	css string
}


type Output_test9_async struct {
	url string
}


// @url string
// @css string
// p1 = PAGE url
// p2 = PAGE (url + "/login")
// SELECT FROM PAGE url ALL css + ","+ css AS r WHERE true  LIMIT 2 + 3
// 
// RETURN url
func DoAsync_test9_async(_ctx context.Context,_ch chan<- Output_test9_async,  _in Input_test9_async) (_err error) {
var _out Output_test9_async
var url string = _in.url ; _ = url
var css string = _in.css ; _ = css
// call to incOut
 _out = Output_test9_async{}
var p1 *rod.Page= rt.GetPage(url);_=p1
defer rt.ClosePage(p1)
var p2 *rod.Page= rt.GetPage((((url) + ("/login"))));_=p2
defer rt.ClosePage(p2)
_it005:=rt.NewSelectAllIterator(_ctx, rt.GetPage(url),((((css) + (","))) + (css)),((2) + (3))); 
for r, _ok005 := _it005.Next(); _ok005;r, _ok005 = _it005.Next(){_=r;
if (true) {continue;}
//call to saveOut
_out.url=url
select {case <- _ctx.Done():return _err;case _ch <- _out:}
if _err = _ctx.Err() ; _err != nil { return _err}
// call to incOut
 _out = Output_test9_async{}
}
return _err
}
