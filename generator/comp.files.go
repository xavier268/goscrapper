package generator

import (
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// get an WriterCloser for the specified (base) name in the target directory.
// remember to close it !
func (c *Compiler) getWriter(name string) (w io.WriteCloser, err error) {

	// truncate potential paths
	name = filepath.Base(name)

	// name should not be empty
	if name == "" {
		return nil, errors.New("file name cannot be empty")
	}

	// ensure dir exists
	if DEBUG_LEVEL >= LEVEL_DEBUG {
		fmt.Println("Creating/verifying target directory ", c.TargetDir)
	}
	err = os.MkdirAll(c.TargetDir, 0755)
	if err != nil {
		return nil, err
	}

	// create file
	w, err = os.Create(c.TargetDir + name)
	if err != nil {
		return nil, err
	}
	return w, err
}

// Writer the file header (comments + package name)
func (c *Compiler) writeHeader(w io.Writer) (err error) {

	_, err = fmt.Fprintf(w,
		`
// Code generated by goscrapper, version %s. DO NOT EDIT.
// %s
// Build %s  - Commit %s
// Generated on %v
//%s

// Package %s is generated. DO NOT EDIT.
package %s
`,
		VERSION, COPYRIGHT, BUILDDATE, GITHASH, time.Now(), strings.Repeat("-", 60), c.Package, c.Package)

	return err
}
