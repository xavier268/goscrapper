Test name : TestLexer
Reference : TestLexer

// test for lexer
/* block 
comment */
BOOL
NUMBER
STRING 
IDENTIFIER

ASSIGN SEMICOLON CLICK INPUT IN 
PRINT RAW SLOW LEFT RIGHT MIDDLE 
RETURN COMMA FOR
SELECT AS FROM
WHERE LIMIT
LPAREN RPAREN
LBRACKET RBRACKET
LBRACE RBRACE
DOT LEN 
PLUS MINUS PLUSPLUS MINUSMINUS MULTI DIV MOD ABS LEN
NOT AND OR XOR
EQ NEQ LT LTE GT GTE
CONTAINS
FIND PATH WITH JOIN PAGE
COLON TEXT ATTR OF
DISTINCT 
AT /* @ */
DOTDOT /* .. */
QUESTION
()[]{}
123 c56 5de
2.56

++ + - -- . .. ...  =  <= >= < > 
= != @ !

&& || ;:%

// testing simple strings
"un"
"  un  "
'deux'
' deux '
"trois & quatre"
'cinq et six'

// testing complex strings
"double quote, 
multi-line,
string with """ escaped double quotes and 'single quotes'"

'single quote
with escaped single ''' quotes and "double" quotes'

EndOfTest
	
&parser.yySymType{yys:0, tok:parser.tok{v:"QUESTION", t:"QUESTION", c:57410}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"(", t:"LPAREN", c:57369}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:")", t:"RPAREN", c:57370}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"[", t:"LBRACKET", c:57371}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"]", t:"RBRACKET", c:57372}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"{", t:"LBRACE", c:57373}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"}", t:"RBRACE", c:57374}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"123", t:"int", c:57347}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"c56", t:"IDENTIFIER", c:57349}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"5", t:"int", c:57347}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"de", t:"IDENTIFIER", c:57349}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"2", t:"int", c:57347}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:".", t:"DOT", c:57375}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"56", t:"int", c:57347}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"++", t:"PLUSPLUS", c:57379}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"+", t:"PLUS", c:57377}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"-", t:"MINUS", c:57378}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"--", t:"MINUSMINUS", c:57380}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:".", t:"DOT", c:57375}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"..", t:"DOTDOT", c:57409}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"..", t:"DOTDOT", c:57409}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:".", t:"DOT", c:57375}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"=", t:"ASSIGN", c:57350}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"<=", t:"LTE", c:57394}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:">=", t:"GTE", c:57396}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"<", t:"LT", c:57393}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:">", t:"GT", c:57395}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"=", t:"ASSIGN", c:57350}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"!=", t:"NEQ", c:57392}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"@", t:"AT", c:57408}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"!", t:"NOT", c:57386}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"&&", t:"AND", c:57387}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"||", t:"OR", c:57388}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:";", t:"SEMICOLON", c:57351}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:":", t:"COLON", c:57403}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"%", t:"MOD", c:57383}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"un", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"  un  ", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"deux", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:" deux ", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"trois & quatre", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"cinq et six", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"double quote, \nmulti-line,\nstring with \"\" escaped double quotes and 'single quotes'", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"single quote\nwith escaped single '' quotes and \"double\" quotes", t:"string", c:57348}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"EndOfTest", t:"IDENTIFIER", c:57349}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}
&parser.yySymType{yys:0, tok:parser.tok{v:"", t:"", c:0}, node:parser.Node(nil), nodes:parser.Nodes(nil), nodemap:parser.NodeMap(nil)}

