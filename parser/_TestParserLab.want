Test name : TestParserLab
Reference : TestParserLab

	a=100;
	b = "deux";
	b2 = "un " + 'deux';
	c = true;
	d = false;
	e = [1,2,3];
	f = {a:1, b:2*3};
	g = {a:e, b:f};
	h = [g,g,g];
	z1 = 2*4+6-5;
	b1 = (b == "deux") OR false;
	PRINT a, +a,-a,++a,--a;
	PRINT z1 == 9; // should be true
	RETURN ;
			compiled reqst : parser.Nodes{parser.nodeAssign{id:"a", node:parser.nodeLitteral{value:100}}, parser.nodeAssign{id:"b", node:parser.nodeLitteral{value:"deux"}}, parser.nodeAssign{id:"b2", node:parser.nodeOpe2{operator:57379, left:parser.nodeLitteral{value:"un "}, right:parser.nodeLitteral{value:"deux"}}}, parser.nodeAssign{id:"c", node:parser.nodeLitteral{value:true}}, parser.nodeAssign{id:"d", node:parser.nodeLitteral{value:false}}, parser.nodeAssign{id:"e", node:parser.Nodes{parser.nodeLitteral{value:1}, parser.nodeLitteral{value:2}, parser.nodeLitteral{value:3}}}, parser.nodeAssign{id:"f", node:parser.NodeMap{"a":parser.nodeLitteral{value:1}, "b":parser.nodeOpe2{operator:57383, left:parser.nodeLitteral{value:2}, right:parser.nodeLitteral{value:3}}}}, parser.nodeAssign{id:"g", node:parser.NodeMap{"a":parser.nodeVariable{id:"e"}, "b":parser.nodeVariable{id:"f"}}}, parser.nodeAssign{id:"h", node:parser.Nodes{parser.nodeVariable{id:"g"}, parser.nodeVariable{id:"g"}, parser.nodeVariable{id:"g"}}}, parser.nodeAssign{id:"z1", node:parser.nodeOpe2{operator:57380, left:parser.nodeOpe2{operator:57379, left:parser.nodeOpe2{operator:57383, left:parser.nodeLitteral{value:2}, right:parser.nodeLitteral{value:4}}, right:parser.nodeLitteral{value:6}}, right:parser.nodeLitteral{value:5}}}, parser.nodeAssign{id:"b1", node:parser.nodeOpe2Bool{operator:57389, left:parser.nodeOpe2{operator:57392, left:parser.nodeVariable{id:"b"}, right:parser.nodeLitteral{value:"deux"}}, right:parser.nodeLitteral{value:false}}}, parser.nodePrint{nodes:parser.Nodes{parser.nodeVariable{id:"a"}, parser.nodeOpe1{operator:57379, right:parser.nodeVariable{id:"a"}}, parser.nodeOpe1{operator:57380, right:parser.nodeVariable{id:"a"}}, parser.nodeOpe1{operator:57381, right:parser.nodeVariable{id:"a"}}, parser.nodeOpe1{operator:57382, right:parser.nodeVariable{id:"a"}}}, raw:false}, parser.nodePrint{nodes:parser.Nodes{parser.nodeOpe2{operator:57392, left:parser.nodeVariable{id:"z1"}, right:parser.nodeLitteral{value:9}}}, raw:false}}
params : []
err : <nil>
result : []interface {}{100, "deux", "un deux", true, false, []interface {}{1, 2, 3}, map[string]interface {}{"a":1, "b":6}, map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}, []interface {}{map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}, map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}, map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}}, 9, true, interface {}(nil), interface {}(nil)}
err :<nil>
--- Dumping vars TestParserLab

Level 0 :
	a = 100
	b = "deux"
	b1 = true
	b2 = "un deux"
	c = true
	d = false
	e = []interface {}{1, 2, 3}
	f = map[string]interface {}{"a":1, "b":6}
	g = map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}
	h = []interface {}{map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}, map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}, map[string]interface {}{"a":[]interface {}{1, 2, 3}, "b":map[string]interface {}{"a":1, "b":6}}}
	z1 = 9


