// Code generated by goyacc -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:1

package parser

import __yyfmt__ "fmt"

//line grammar.y:3

import (
// "fmt"
)

// Déclaration d'une interface pour gérer les différents types de noeuds de l'AST
type Expr interface{}

const MULTI = 57346
const DIV = 57347
const MOD = 57348
const PLUS = 57349
const MINUS = 57350
const PLUSPLUS = 57351
const MINUSMINUS = 57352
const LTE = 57353
const GTE = 57354
const LT = 57355
const GT = 57356
const EQ = 57357
const NEQ = 57358
const COLON = 57359
const SEMICOLON = 57360
const DOT = 57361
const COMMA = 57362
const LBRACKET = 57363
const RBRACKET = 57364
const LPAREN = 57365
const RPAREN = 57366
const LBRACE = 57367
const RBRACE = 57368
const AND = 57369
const OR = 57370
const XOR = 57371
const DOTDOT = 57372
const ASSIGN = 57373
const QUESTION = 57374
const REGEXMATCH = 57375
const REGEXNOTMATCH = 57376
const FOR = 57377
const RETURN = 57378
const WAITFOR = 57379
const OPTIONS = 57380
const TIMEOUT = 57381
const DISTINCT = 57382
const FILTER = 57383
const CURRENT = 57384
const SORT = 57385
const LIMIT = 57386
const LET = 57387
const COLLECT = 57388
const ASC = 57389
const DESC = 57390
const NONE = 57391
const NULL = 57392
const TRUE = 57393
const FALSE = 57394
const USE = 57395
const INTO = 57396
const KEEP = 57397
const WITH = 57398
const COUNT = 57399
const ALL = 57400
const ANY = 57401
const AGGREGATE = 57402
const EVENT = 57403
const LIKE = 57404
const NOT = 57405
const IN = 57406
const DO = 57407
const WHILE = 57408
const BOOL = 57409
const PARAM = 57410
const IDENTIFIER = 57411
const IGNOREID = 57412
const STRING = 57413
const NUMBER = 57414
const NAMESPACESEPARATOR = 57415

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MULTI",
	"DIV",
	"MOD",
	"PLUS",
	"MINUS",
	"PLUSPLUS",
	"MINUSMINUS",
	"LTE",
	"GTE",
	"LT",
	"GT",
	"EQ",
	"NEQ",
	"COLON",
	"SEMICOLON",
	"DOT",
	"COMMA",
	"LBRACKET",
	"RBRACKET",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"AND",
	"OR",
	"XOR",
	"DOTDOT",
	"ASSIGN",
	"QUESTION",
	"REGEXMATCH",
	"REGEXNOTMATCH",
	"FOR",
	"RETURN",
	"WAITFOR",
	"OPTIONS",
	"TIMEOUT",
	"DISTINCT",
	"FILTER",
	"CURRENT",
	"SORT",
	"LIMIT",
	"LET",
	"COLLECT",
	"ASC",
	"DESC",
	"NONE",
	"NULL",
	"TRUE",
	"FALSE",
	"USE",
	"INTO",
	"KEEP",
	"WITH",
	"COUNT",
	"ALL",
	"ANY",
	"AGGREGATE",
	"EVENT",
	"LIKE",
	"NOT",
	"IN",
	"DO",
	"WHILE",
	"BOOL",
	"PARAM",
	"IDENTIFIER",
	"IGNOREID",
	"STRING",
	"NUMBER",
	"NAMESPACESEPARATOR",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:247

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 25,
	4, 61,
	5, 61,
	6, 61,
	7, 61,
	8, 61,
	11, 61,
	12, 61,
	13, 61,
	14, 61,
	-2, 55,
	-1, 65,
	9, 43,
	-2, 58,
	-1, 79,
	9, 42,
	-2, 50,
	-1, 80,
	9, 43,
	-2, 51,
	-1, 81,
	9, 43,
	-2, 57,
	-1, 115,
	69, 75,
	-2, 56,
	-1, 116,
	69, 76,
	-2, 49,
	-1, 117,
	69, 77,
	-2, 65,
	-1, 119,
	69, 79,
	-2, 67,
}

const yyPrivate = 57344

const yyLast = 201

var yyAct = [...]uint8{
	64, 30, 3, 73, 114, 12, 74, 45, 25, 8,
	14, 8, 28, 18, 83, 105, 38, 27, 118, 127,
	29, 10, 9, 70, 98, 105, 58, 59, 60, 68,
	28, 110, 24, 97, 31, 75, 77, 68, 63, 34,
	121, 76, 19, 16, 20, 10, 9, 94, 36, 15,
	93, 66, 31, 90, 106, 11, 35, 36, 22, 130,
	85, 124, 91, 95, 92, 125, 123, 84, 61, 128,
	112, 58, 82, 104, 27, 99, 23, 37, 32, 72,
	29, 26, 98, 79, 17, 101, 71, 28, 78, 24,
	69, 31, 84, 108, 59, 103, 96, 107, 46, 109,
	113, 119, 86, 27, 111, 87, 39, 126, 4, 62,
	122, 13, 65, 21, 126, 22, 120, 102, 24, 100,
	31, 68, 119, 33, 129, 122, 55, 57, 56, 113,
	80, 81, 6, 23, 5, 32, 67, 29, 26, 55,
	57, 56, 53, 54, 22, 7, 52, 50, 51, 49,
	47, 48, 2, 1, 0, 0, 42, 43, 0, 89,
	42, 43, 116, 0, 32, 88, 117, 115, 40, 41,
	44, 0, 40, 41, 44, 52, 50, 51, 49, 47,
	48, 0, 55, 57, 56, 53, 54, 0, 90, 52,
	50, 51, 49, 47, 48, 52, 50, 51, 49, 47,
	48,
}

var yyPact = [...]int16{
	-14, -1000, -14, -1000, -1000, -1000, -1000, -1000, -1000, 9,
	-30, 25, -1000, -1000, 68, 66, 145, 178, 184, 184,
	184, -1000, -1000, -1000, 66, -1000, -1000, 66, 66, -1000,
	-1000, -34, 34, -23, -1000, 66, 66, -1000, 68, 66,
	-1000, -1000, -1000, -1000, -1000, 66, 66, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -9, -51,
	27, 141, 135, 164, 68, 122, 40, 44, 68, 24,
	21, 43, 13, -1000, -1000, 58, 4, 68, 30, 145,
	178, 178, -1000, -9, -1000, 34, 184, -1000, -1000, -1000,
	-1000, -1000, 66, -1000, -1000, -38, -1000, -45, 53, 95,
	-25, -1000, -1000, -1000, 34, -6, -1000, 29, 68, -1000,
	52, -1000, -6, 68, -1000, -1000, -1000, -1000, -1000, -1000,
	95, 10, 37, -1000, -1000, -1000, -1000, -45, 66, -1000,
	-1000,
}

var yyPgo = [...]uint8{
	0, 153, 152, 2, 108, 145, 8, 0, 51, 136,
	134, 132, 123, 119, 117, 18, 113, 106, 7, 98,
	43, 84, 13, 42, 44, 1, 90, 86, 3, 4,
	23, 79, 6,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 4, 4, 5, 6, 8,
	8, 9, 9, 3, 3, 10, 10, 11, 13, 13,
	13, 14, 12, 16, 17, 17, 18, 18, 18, 18,
	18, 18, 17, 17, 17, 17, 17, 19, 19, 19,
	19, 19, 7, 7, 7, 7, 7, 7, 7, 20,
	20, 20, 20, 20, 20, 20, 21, 21, 21, 21,
	21, 21, 22, 22, 22, 23, 23, 24, 24, 26,
	26, 27, 27, 28, 28, 29, 29, 29, 29, 29,
	15, 25, 30, 30, 31, 31, 32,
}

var yyR2 = [...]int8{
	0, 2, 1, 1, 2, 1, 1, 3, 4, 0,
	1, 1, 3, 1, 1, 2, 3, 6, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	3, 3, 3, 3, 3, 1, 1, 3, 2, 2,
	3, 1, 3, 3, 1, 1, 3, 1, 3, 0,
	1, 1, 3, 3, 1, 1, 1, 1, 1, 1,
	3, 3, 0, 2, 1, 3, 3,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -10, -11, -5, -6, 36,
	35, 69, -3, -4, -7, 40, -20, -21, -22, -23,
	-24, -16, 49, 67, 23, -6, 72, 8, 21, 71,
	-25, 25, 69, -12, 69, 31, 23, 9, -7, -17,
	27, 28, 15, 16, 29, -18, -19, 15, 16, 14,
	12, 13, 11, 7, 8, 4, 6, 5, -18, -18,
	-18, -20, -21, -22, -7, -21, -8, -9, -7, -26,
	-30, -27, -31, -28, -32, 69, 64, -7, -8, -20,
	-21, -21, -22, 23, -6, 69, -23, -24, 24, 24,
	24, 22, 20, 26, 26, 20, -30, 20, 69, 17,
	-13, -6, -14, -15, 69, 21, 24, -22, -7, -28,
	69, -32, 17, -7, -29, 72, 67, 71, -15, -25,
	21, 65, -29, 72, 67, 71, -25, 25, 17, -3,
	22,
}

var yyDef = [...]int8{
	0, -2, 0, 2, 3, 13, 14, 5, 6, 0,
	0, 0, 1, 4, 15, 0, 42, 43, 44, 45,
	46, 47, 48, 49, 0, -2, 56, 0, 9, 65,
	67, 69, 23, 0, 22, 0, 9, 59, 16, 0,
	24, 25, 32, 33, 36, 0, 0, 26, 27, 28,
	29, 30, 31, 37, 38, 39, 40, 41, 0, 0,
	0, 42, 43, 44, 0, -2, 0, 10, 11, 0,
	0, 70, 82, 71, 84, 74, 0, 7, 0, -2,
	-2, -2, 52, 0, 64, 0, 66, 53, 54, 60,
	63, 62, 0, 68, 81, 0, 83, 0, 0, 0,
	0, 18, 19, 20, 21, 0, 8, 0, 12, 72,
	74, 85, 0, 73, 86, -2, -2, -2, 78, -2,
	9, 0, 0, 75, 76, 77, 79, 82, 0, 17,
	80,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	}
	goto yystack /* stack new state and value */
}
