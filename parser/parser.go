// Code generated by goyacc -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:1

package parser

import __yyfmt__ "fmt"

//line grammar.y:3

const MULTI = 57346
const DIV = 57347
const MOD = 57348
const PLUS = 57349
const MINUS = 57350
const PLUSPLUS = 57351
const MINUSMINUS = 57352
const LTE = 57353
const GTE = 57354
const LT = 57355
const GT = 57356
const EQ = 57357
const NEQ = 57358
const COLON = 57359
const SEMICOLON = 57360
const DOT = 57361
const COMMA = 57362
const LBRACKET = 57363
const RBRACKET = 57364
const LPAREN = 57365
const RPAREN = 57366
const LBRACE = 57367
const RBRACE = 57368
const AND = 57369
const OR = 57370
const XOR = 57371
const DOTDOT = 57372
const ASSIGN = 57373
const QUESTION = 57374
const REGEXMATCH = 57375
const REGEXNOTMATCH = 57376
const FOR = 57377
const RETURN = 57378
const WAITFOR = 57379
const OPTIONS = 57380
const IGNORE = 57381
const HEADLESS = 57382
const TIMEOUT = 57383
const DISTINCT = 57384
const FILTER = 57385
const CURRENT = 57386
const SORT = 57387
const LIMIT = 57388
const LET = 57389
const COLLECT = 57390
const ASC = 57391
const DESC = 57392
const NONE = 57393
const NULL = 57394
const TRUE = 57395
const FALSE = 57396
const USE = 57397
const INTO = 57398
const KEEP = 57399
const WITH = 57400
const COUNT = 57401
const ALL = 57402
const ANY = 57403
const AGGREGATE = 57404
const EVENT = 57405
const LIKE = 57406
const NOT = 57407
const IN = 57408
const WHILE = 57409
const BOOL = 57410
const AT = 57411
const IDENTIFIER = 57412
const IGNOREID = 57413
const STRING = 57414
const NUMBER = 57415
const NAMESPACESEPARATOR = 57416
const SELECT = 57417
const CLICK = 57418
const DOCUMENT = 57419
const PAGE = 57420
const CONTAINS = 57421

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"MULTI",
	"DIV",
	"MOD",
	"PLUS",
	"MINUS",
	"PLUSPLUS",
	"MINUSMINUS",
	"LTE",
	"GTE",
	"LT",
	"GT",
	"EQ",
	"NEQ",
	"COLON",
	"SEMICOLON",
	"DOT",
	"COMMA",
	"LBRACKET",
	"RBRACKET",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"AND",
	"OR",
	"XOR",
	"DOTDOT",
	"ASSIGN",
	"QUESTION",
	"REGEXMATCH",
	"REGEXNOTMATCH",
	"FOR",
	"RETURN",
	"WAITFOR",
	"OPTIONS",
	"IGNORE",
	"HEADLESS",
	"TIMEOUT",
	"DISTINCT",
	"FILTER",
	"CURRENT",
	"SORT",
	"LIMIT",
	"LET",
	"COLLECT",
	"ASC",
	"DESC",
	"NONE",
	"NULL",
	"TRUE",
	"FALSE",
	"USE",
	"INTO",
	"KEEP",
	"WITH",
	"COUNT",
	"ALL",
	"ANY",
	"AGGREGATE",
	"EVENT",
	"LIKE",
	"NOT",
	"IN",
	"WHILE",
	"BOOL",
	"AT",
	"IDENTIFIER",
	"IGNOREID",
	"STRING",
	"NUMBER",
	"NAMESPACESEPARATOR",
	"SELECT",
	"CLICK",
	"DOCUMENT",
	"PAGE",
	"CONTAINS",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:180

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 163

var yyAct = [...]int8{
	3, 24, 47, 16, 11, 10, 51, 49, 50, 48,
	52, 53, 47, 35, 34, 39, 41, 42, 47, 90,
	25, 31, 51, 49, 50, 48, 52, 53, 11, 10,
	40, 72, 7, 83, 31, 78, 76, 21, 44, 12,
	11, 10, 82, 31, 14, 15, 37, 13, 85, 29,
	73, 22, 75, 32, 79, 36, 80, 30, 29, 28,
	38, 43, 8, 12, 47, 23, 57, 9, 14, 15,
	46, 13, 26, 19, 54, 12, 47, 87, 88, 34,
	14, 15, 94, 13, 92, 68, 35, 69, 70, 71,
	54, 33, 55, 90, 36, 95, 27, 93, 34, 35,
	33, 45, 74, 36, 81, 84, 77, 34, 35, 69,
	70, 71, 5, 86, 20, 6, 60, 59, 61, 58,
	56, 18, 89, 65, 63, 64, 62, 66, 67, 60,
	59, 61, 58, 56, 2, 1, 91, 60, 59, 61,
	58, 56, 0, 60, 59, 61, 58, 56, 0, 91,
	65, 63, 64, 62, 66, 67, 60, 59, 61, 4,
	0, 0, 17,
}

var yyPact = [...]int16{
	-7, -1000, -7, -1000, -1000, -31, -1000, -35, -19, -1000,
	26, -24, 29, 7, 7, 7, -1000, -1000, -1000, -1000,
	41, -1000, -32, -1000, 11, 139, 82, -1000, -1000, 35,
	-1000, 13, -1000, 35, -1000, -1000, -1000, -10, 26, 57,
	7, 57, 57, -39, -1000, -58, 7, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -60, 13, 13, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -13, -1000,
	-1000, -1000, -5, 112, 60, 152, 13, -1000, 11, 139,
	7, -1000, 69, -1000, -1000, 57, -1000, 152, 133, -1000,
	-1000, -1000, -1000, 125, 5, -1000,
}

var yyPgo = [...]uint8{
	0, 135, 134, 0, 159, 114, 112, 115, 67, 65,
	1, 20, 72, 59, 101, 57, 92, 53, 85, 70,
	66,
}

var yyR1 = [...]int8{
	0, 1, 1, 2, 2, 4, 4, 5, 5, 3,
	3, 6, 6, 8, 8, 8, 8, 7, 7, 9,
	9, 9, 9, 10, 10, 10, 13, 11, 11, 11,
	11, 11, 15, 12, 12, 12, 12, 12, 12, 17,
	18, 18, 18, 16, 16, 16, 16, 14, 20, 20,
	20, 20, 20, 20, 19, 19, 19, 19, 19, 19,
	19,
}

var yyR2 = [...]int8{
	0, 2, 1, 2, 1, 2, 3, 1, 3, 2,
	1, 1, 2, 3, 2, 2, 2, 2, 5, 1,
	1, 1, 1, 1, 3, 3, 1, 1, 3, 3,
	2, 3, 1, 1, 3, 2, 3, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}

var yyChk = [...]int16{
	-1000, -1, -2, -3, -4, -6, -7, 39, 69, -8,
	36, 35, 70, 78, 75, 76, -3, -4, -7, -8,
	-5, 72, 70, -9, -10, -11, -12, 70, -13, 23,
	-15, 8, -17, 65, 72, 73, 68, 70, 31, -10,
	23, -10, -10, 20, 70, -14, -19, 7, 14, 12,
	13, 11, 15, 16, 79, -16, 8, -20, 7, 5,
	4, 6, 14, 12, 13, 11, 15, 16, -18, 27,
	28, 29, -10, -11, -12, -11, 23, -12, -10, -11,
	66, -9, -10, 72, -13, -10, -15, -11, -11, -17,
	24, 24, 24, -11, -10, -3,
}

var yyDef = [...]int8{
	0, -2, 0, 2, 4, 0, 10, 0, 0, 11,
	0, 0, 0, 0, 0, 0, 1, 3, 9, 12,
	5, 7, 0, 17, 19, 20, 21, 22, 23, 0,
	27, 0, 33, 0, 26, 32, 39, 0, 0, 14,
	0, 15, 16, 0, 6, 0, 0, 47, 54, 55,
	56, 57, 58, 59, 60, 0, 0, 0, 43, 44,
	45, 46, 48, 49, 50, 51, 52, 53, 0, 40,
	41, 42, 0, 0, 0, 30, 0, 35, 0, 0,
	0, 13, 0, 8, 24, 36, 28, 29, 37, 34,
	25, 31, 38, 0, 0, 18,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
	72, 73, 74, 75, 76, 77, 78, 79,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:49
		{
			yylex.(*myLexer).finalize()
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:50
		{
			yylex.(*myLexer).finalize()
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:61
		{
			yylex.(*myLexer).addLines("rt.Ignore(" + yyDollar[2].value + ")")
		}
	case 6:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:64
		{ // @ paramName paramType
			yylex.(*myLexer).setParam(yyDollar[2].value, yyDollar[3].value)
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:70
		{
			yyVAL.value = yyDollar[1].value
		}
	case 8:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:71
		{
			yyVAL.value = yyDollar[1].value + "," + yyDollar[3].value
		}
	}
	goto yystack /* stack new state and value */
}
