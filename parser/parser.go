// Code generated by goyacc -o parser.go grammar.y. DO NOT EDIT.

//line grammar.y:1

package parser

import __yyfmt__ "fmt"

//line grammar.y:3

import (
	"fmt"
)

// keep the compiler happy
var _ = fmt.Println

type tok struct {
	v string // token cvalue
	t string // token type
	c int    // lexer/parser constant code
}

var lx *myLexer // shorthand for lx

//line grammar.y:23
type yySymType struct {
	yys          int
	tok          tok          // token read from lexer, implements Node.
	node         Node         // default for statements and expression
	nodes        Nodes        // default for lists of expressions or statements, implements Node.
	nodemap      NodeMap      // default set of Node, with string keys, using valid id syntax, implements Node.
	nodeWithBody NodeWithBody // a node that incorporates a set of nodes
}

const BOOL = 57346
const NUMBER = 57347
const STRING = 57348
const IDENTIFIER = 57349
const ASSIGN = 57350
const SEMICOLON = 57351
const CLICK = 57352
const INPUT = 57353
const IN = 57354
const PRINT = 57355
const RAW = 57356
const SLOW = 57357
const LEFT = 57358
const RIGHT = 57359
const MIDDLE = 57360
const RETURN = 57361
const COMMA = 57362
const FOR = 57363
const SELECT = 57364
const AS = 57365
const FROM = 57366
const TO = 57367
const STEP = 57368
const WHERE = 57369
const LIMIT = 57370
const LPAREN = 57371
const RPAREN = 57372
const LBRACKET = 57373
const RBRACKET = 57374
const LBRACE = 57375
const RBRACE = 57376
const DOT = 57377
const LEN = 57378
const PLUS = 57379
const MINUS = 57380
const PLUSPLUS = 57381
const MINUSMINUS = 57382
const MULTI = 57383
const DIV = 57384
const MOD = 57385
const ABS = 57386
const NOT = 57387
const AND = 57388
const OR = 57389
const XOR = 57390
const NAND = 57391
const EQ = 57392
const NEQ = 57393
const LT = 57394
const LTE = 57395
const GT = 57396
const GTE = 57397
const CONTAINS = 57398
const FIND = 57399
const PATH = 57400
const WITH = 57401
const JOIN = 57402
const PAGE = 57403
const COLON = 57404
const TEXT = 57405
const ATTR = 57406
const OF = 57407
const DISTINCT = 57408
const AT = 57409
const DOTDOT = 57410
const QUESTION = 57411
const RANGE = 57412

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"BOOL",
	"NUMBER",
	"STRING",
	"IDENTIFIER",
	"ASSIGN",
	"SEMICOLON",
	"CLICK",
	"INPUT",
	"IN",
	"PRINT",
	"RAW",
	"SLOW",
	"LEFT",
	"RIGHT",
	"MIDDLE",
	"RETURN",
	"COMMA",
	"FOR",
	"SELECT",
	"AS",
	"FROM",
	"TO",
	"STEP",
	"WHERE",
	"LIMIT",
	"LPAREN",
	"RPAREN",
	"LBRACKET",
	"RBRACKET",
	"LBRACE",
	"RBRACE",
	"DOT",
	"LEN",
	"PLUS",
	"MINUS",
	"PLUSPLUS",
	"MINUSMINUS",
	"MULTI",
	"DIV",
	"MOD",
	"ABS",
	"NOT",
	"AND",
	"OR",
	"XOR",
	"NAND",
	"EQ",
	"NEQ",
	"LT",
	"LTE",
	"GT",
	"GTE",
	"CONTAINS",
	"FIND",
	"PATH",
	"WITH",
	"JOIN",
	"PAGE",
	"COLON",
	"TEXT",
	"ATTR",
	"OF",
	"DISTINCT",
	"AT",
	"DOTDOT",
	"QUESTION",
	"RANGE",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line grammar.y:304

//line yacctab:1
var yyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 276

var yyAct = [...]uint8{
	84, 138, 87, 54, 140, 32, 88, 94, 20, 117,
	22, 48, 49, 79, 82, 116, 58, 80, 43, 42,
	41, 44, 89, 21, 137, 141, 142, 105, 106, 115,
	95, 96, 97, 51, 78, 43, 42, 41, 44, 81,
	141, 142, 60, 38, 62, 63, 65, 64, 91, 85,
	62, 63, 65, 64, 98, 122, 103, 104, 159, 157,
	38, 107, 39, 83, 40, 100, 114, 30, 25, 26,
	27, 28, 147, 152, 114, 29, 31, 109, 67, 68,
	110, 45, 69, 70, 71, 108, 113, 111, 119, 59,
	151, 72, 73, 76, 77, 74, 75, 52, 45, 98,
	121, 120, 123, 124, 102, 3, 134, 128, 47, 127,
	62, 63, 65, 64, 46, 130, 101, 89, 132, 131,
	57, 90, 43, 42, 41, 44, 136, 62, 63, 65,
	64, 5, 6, 145, 139, 143, 16, 17, 146, 93,
	92, 2, 149, 150, 148, 153, 50, 38, 154, 39,
	144, 40, 155, 158, 30, 25, 26, 27, 28, 156,
	61, 66, 29, 31, 43, 42, 41, 44, 23, 8,
	62, 63, 65, 64, 135, 35, 95, 96, 97, 133,
	86, 18, 19, 126, 4, 45, 129, 33, 1, 38,
	62, 63, 65, 64, 37, 24, 62, 63, 65, 64,
	62, 63, 65, 64, 118, 34, 62, 63, 65, 64,
	125, 62, 63, 65, 64, 99, 62, 63, 65, 64,
	62, 63, 65, 64, 36, 0, 0, 45, 0, 112,
	0, 62, 63, 65, 64, 62, 63, 65, 64, 0,
	0, 62, 63, 65, 64, 62, 63, 65, 64, 62,
	63, 65, 64, 9, 0, 0, 10, 11, 57, 12,
	53, 13, 0, 56, 0, 7, 0, 14, 15, 0,
	0, 0, 0, 0, 0, 55,
}

var yyPact = [...]int16{
	-1000, -1000, 246, -1000, 246, -1000, -1000, 118, 246, 100,
	118, 118, 19, 88, 251, 118, -1000, -1000, 80, 22,
	189, 41, -1000, 118, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -18, -1000, -1000, -1000, -1000, -1000, 118, 31,
	15, -1000, -1000, -1000, -1000, 114, -1000, 118, 160, 203,
	118, -1000, -1000, -1000, 92, 118, 118, -1000, 4, -1000,
	118, 118, -1000, -1000, -1000, -1000, 118, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 118,
	110, 199, 54, -1000, 189, -1000, -5, -1000, -53, -1000,
	-1000, 195, 79, 14, -1000, -1000, -1000, -1000, -1000, 118,
	46, 118, 118, 185, 174, 113, 118, 189, 41, -1000,
	154, -1000, -1000, -1000, 118, -1000, 110, 118, -1000, -1000,
	-1000, 170, -1000, 81, 165, 118, -1000, 0, -2, -1000,
	189, -1000, 189, -1000, 118, -1000, 124, 118, 63, 13,
	-1000, 118, 118, 64, 118, -1000, -2, -1000, -1000, 189,
	189, 118, -1000, 150, 50, 144, 49, -1000, -1000, -1000,
}

var yyPgo = [...]uint8{
	0, 224, 205, 5, 0, 23, 10, 195, 132, 194,
	2, 6, 188, 131, 187, 14, 105, 184, 182, 181,
	180, 175, 169, 168, 161, 160, 3, 146, 141, 140,
	139, 7, 1, 134, 4,
}

var yyR1 = [...]int8{
	0, 12, 28, 16, 16, 17, 17, 8, 8, 8,
	8, 8, 27, 27, 29, 29, 30, 30, 31, 31,
	31, 31, 13, 13, 19, 19, 18, 18, 22, 22,
	22, 22, 22, 22, 22, 22, 22, 26, 32, 32,
	33, 33, 34, 34, 9, 9, 4, 4, 5, 5,
	6, 6, 7, 7, 7, 7, 3, 3, 3, 1,
	1, 1, 14, 14, 2, 2, 15, 15, 21, 21,
	20, 20, 10, 23, 23, 23, 23, 23, 23, 23,
	24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	24, 25, 25, 25, 25, 11,
}

var yyR2 = [...]int8{
	0, 2, 0, 2, 1, 1, 2, 4, 4, 5,
	4, 2, 0, 1, 0, 1, 1, 2, 1, 1,
	1, 1, 3, 2, 0, 1, 1, 3, 2, 9,
	9, 7, 6, 5, 4, 8, 6, 1, 0, 1,
	1, 2, 2, 2, 1, 2, 3, 1, 3, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	1, 1, 4, 3, 3, 2, 1, 3, 2, 3,
	1, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1,
}

var yyChk = [...]int16{
	-1000, -12, -28, -16, -17, -13, -8, 19, -22, 7,
	10, 11, 13, 15, 21, 22, -13, -8, -19, -18,
	-4, -5, -6, -23, -7, 37, 38, 39, 40, 44,
	36, 45, -3, -14, -2, -21, -1, -9, 29, 31,
	33, 6, 5, 4, 7, 67, -16, 8, -4, -4,
	-27, 14, 9, 9, -26, 24, 12, 7, -4, 9,
	20, -25, 46, 47, 49, 48, -24, 37, 38, 41,
	42, 43, 50, 51, 54, 55, 52, 53, -6, 31,
	35, -4, -15, 32, -4, 34, -20, -10, -11, 7,
	7, -4, -29, -30, -31, 16, 17, 18, -3, 12,
	-15, 24, 12, -4, -4, 23, 24, -4, -5, -6,
	-4, -11, 30, 32, 20, 34, 20, 62, 9, 9,
	-31, -4, 9, -4, -4, 25, 9, -26, -4, 32,
	-4, -10, -4, 9, 25, 9, -4, 24, -32, -33,
	-34, 27, 28, -4, 26, 9, -4, 9, -34, -4,
	-4, 26, 9, -4, -32, -4, 9, 9, 9, 9,
}

var yyDef = [...]int8{
	2, -2, 0, 1, 0, 4, 5, 24, 0, 0,
	0, 0, 12, 0, 0, 0, 3, 6, 0, 25,
	26, 47, 49, 0, 51, 73, 74, 75, 76, 77,
	78, 79, 52, 53, 54, 55, 56, 57, 0, 0,
	0, 59, 60, 61, 44, 0, 23, 0, 14, 0,
	0, 13, 11, 28, 0, 0, 0, 37, 0, 22,
	0, 0, 91, 92, 93, 94, 0, 80, 81, 82,
	83, 84, 85, 86, 87, 88, 89, 90, 50, 0,
	0, 0, 0, 65, 66, 68, 0, 70, 0, 95,
	45, 0, 0, 15, 16, 18, 19, 20, 21, 0,
	0, 0, 0, 0, 0, 0, 0, 27, 46, 48,
	0, 63, 58, 64, 0, 69, 0, 0, 7, 8,
	17, 0, 10, 0, 0, 0, 34, 0, 38, 62,
	67, 71, 72, 9, 0, 33, 0, 0, 0, 39,
	40, 0, 0, 0, 0, 32, 38, 36, 41, 42,
	43, 0, 31, 0, 0, 0, 0, 35, 29, 30,
}

var yyTok1 = [...]int8{
	1,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 69, 70,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:90
		{
			yyVAL.node = nodeProgram{req: yyDollar[2].nodes, invars: lx.ParamsList()}
			lx.root = yyVAL.node
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:94
		{
			lx = yylex.(*myLexer)
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:98
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:99
		{
			yyVAL.nodes = Nodes{yyDollar[1].node}
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:103
		{
			yyVAL.nodes = Nodes{yyDollar[1].node}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:104
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
		}
	case 7:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:108
		{
			yyVAL.node = lx.newNodeAssign(yyDollar[1].tok, yyDollar[3].node)
		}
	case 8:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:109
		{ /*todo*/
		}
	case 9:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:110
		{ /*todo*/
		}
	case 10:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:113
		{
			yyVAL.node = nodePrint{nodes: yyDollar[3].nodes, raw: (yyDollar[2].tok.c == RAW)}
		}
	case 11:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:114
		{ /*todo*/
		}
	case 12:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:118
		{
			yyVAL.tok = tok{}
		}
	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:119
		{
			yyVAL.tok = yyDollar[1].tok
		}
	case 14:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:123
		{ /*todo*/
		}
	case 15:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:124
		{ /*todo*/
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:128
		{ /*todo*/
		}
	case 17:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:129
		{ /*todo*/
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:133
		{ /*todo*/
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:134
		{ /*todo*/
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:135
		{ /*todo*/
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:136
		{ /*todo*/
		}
	case 22:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:140
		{
			yyVAL.node = nodeReturn{yyDollar[2].nodes}
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:141
		{
			yyVAL.node = yyDollar[1].nodeWithBody.appendBody(yyDollar[2].nodes)
		}
	case 24:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:145
		{
			yyVAL.nodes = Nodes{}
		}
	case 26:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:150
		{
			yyVAL.nodes = Nodes{yyDollar[1].node}
		}
	case 27:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:151
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 28:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:154
		{
			yyVAL.nodeWithBody = lx.newNodeForLoop(nil, nil, nil, nil)
		}
	case 29:
		yyDollar = yyS[yypt-9 : yypt+1]
//line grammar.y:157
		{
			yyVAL.nodeWithBody = lx.newNodeForLoop(yyDollar[2].tok, yyDollar[4].node, yyDollar[6].node, yyDollar[8].node)
		}
	case 30:
		yyDollar = yyS[yypt-9 : yypt+1]
//line grammar.y:159
		{
			yyVAL.nodeWithBody = lx.newNodeForLoop(nil, yyDollar[3].node, yyDollar[5].node, yyDollar[7].node)
		}
	case 31:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:162
		{
			yyVAL.nodeWithBody = lx.newNodeForLoop(yyDollar[2].tok, yyDollar[4].node, yyDollar[6].node, nil)
		}
	case 32:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:164
		{
			yyVAL.nodeWithBody = lx.newNodeForLoop(nil, yyDollar[3].node, yyDollar[5].node, nil)
		}
	case 33:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:166
		{ /*todo*/
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:167
		{ /*todo*/
		}
	case 35:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:170
		{ /*todo*/
		}
	case 36:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:172
		{ /*todo*/
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:180
		{ /*todo*/
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:181
		{ /*todo*/
		}
	case 40:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:185
		{ /*todo*/
		}
	case 41:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:186
		{ /*todo*/
		}
	case 42:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:190
		{ /*todo*/
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:191
		{ /*todo*/
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:195
		{
			yyVAL.node = lx.newNodeVariable(yyDollar[1].tok, false, true)
		}
	case 45:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:196
		{
			yyVAL.node = lx.newNodeVariable(yyDollar[2].tok, true, false)
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:207
		{
			yyVAL.node = lx.newNodeOpe2Bool(yyDollar[1].node, yyDollar[2].tok, yyDollar[3].node)
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:212
		{
			yyVAL.node = lx.newNodeOpe2(yyDollar[1].node, yyDollar[2].tok, yyDollar[3].node)
		}
	case 50:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:217
		{
			yyVAL.node = lx.newNodeOpe1(yyDollar[1].tok, yyDollar[2].node)
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:223
		{ /*todo*/
		}
	case 54:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:224
		{
			yyVAL.node = yyDollar[1].node
		}
	case 55:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:225
		{
			yyVAL.node = yyDollar[1].nodemap
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:231
		{
			yyVAL.node = yyDollar[2].node
		}
	case 59:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:235
		{
			yyVAL.node = lx.newNodeLitteral(yyDollar[1].tok)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:236
		{
			yyVAL.node = lx.newNodeLitteral(yyDollar[1].tok)
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:237
		{
			yyVAL.node = lx.newNodeLitteral(yyDollar[1].tok)
		}
	case 62:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:241
		{
			yyVAL.node = nodeArrayAccess{a: yyDollar[1].node, i: yyDollar[3].node}
		}
	case 63:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:242
		{
			yyVAL.node = nodeMapAccess{m: yyDollar[1].node, k: yyDollar[3].node}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:246
		{
			yyVAL.node = yyDollar[2].nodes
		}
	case 65:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:247
		{
			yyVAL.node = Nodes(nil)
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:251
		{
			yyVAL.nodes = Nodes{yyDollar[1].node}
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:252
		{
			yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[3].node)
		}
	case 68:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:256
		{
			yyVAL.nodemap = lx.newNodeMap(nil, nil)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:257
		{
			yyVAL.nodemap = yyDollar[2].nodemap
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:261
		{
			yyVAL.nodemap = lx.newNodeMap(nil, yyDollar[1].node)
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:262
		{
			yyVAL.nodemap = lx.newNodeMap(yyDollar[1].nodemap, yyDollar[3].node)
		}
	case 72:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:266
		{
			yyVAL.node = lx.newNodeKeyValue(yyDollar[1].node, yyDollar[3].node)
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:302
		{
			yyVAL.node = lx.newNodeKey(yyDollar[1].tok)
		}
	}
	goto yystack /* stack new state and value */
}
