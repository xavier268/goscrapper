version: "3"

env:
  GOOS: # windows or linux ?
    sh: go env GOOS
  VERSION: # program version
    sh: echo $( go run ./gsc -version) ; if [ $? -ne 0 ]; then echo "0.0.0"; fi 
  EXE: # executable extension (.exe or nothing)
    sh: 'if [ "$(go env GOOS)" = "windows" ]; then echo ".exe"; else echo ""; fi'
  BROWSER: # browser to open  page
    sh: 'if [ "$(go env GOOS)" = "windows" ]; then echo "Powershell Start-Process "; else echo "xdg-open"; fi'
  DATE: # date string
    sh: 'if [ "$(go env GOOS)" = "windows" ]; then echo "$(Powershell Get-Date -Format s)"; else echo "$(date -Iseconds)"; fi'

tasks:

  update-task:
    desc: update task to latest version
    cmds:
      - go install github.com/go-task/task/v3/cmd/task@latest

  default:
    desc: default task will display task menu
    cmds:
      - task --list-all

  info: 
    desc: display various useful information
    deps: [build]
    cmds:
      - task --version
      - go version
      - bin/gsc-{{.VERSION}}{{.EXE}} -info

  godoc: 
    desc: launch godoc viewer and open browser page on windows
    cmds:     
      - go install golang.org/x/tools/cmd/godoc@latest     
      - $( {{.BROWSER }} "http://localhost:6060" )
      - echo "Press Ctrl-c to exit the task" 
      - godoc -http :6060

  build:
    desc: build program and utilities
    deps: [generate]
    sources: # what triggers rebuild
      - ./**/*go
    generates: # what triggers rebuild
      - bin/gsc-{{.VERSION}}{{.EXE}}
    cmds:
      - go mod tidy
      - go build ./...
      - go build -o bin/gsc-{{.VERSION}}{{.EXE}} -ldflags "-X 'github.com/xavier268/goscrapper.BUILDDATE={{.DATE}}' -X 'github.com/xavier268/goscrapper.GITHASH=$(git rev-parse HEAD)'" ./gsc

  test:
    desc: run all tests
    deps: [build]
    cmds:
      - go test ./parser # unit tests
      - go test -v -count=1 ./e2e # end-to-end tests
      - go test -v ./examples # examples folder


  clean: 
    desc: clean caches and binaries, and test dirs
    deps : # dependencies tasks will run in parallel
      - clean-linux
      - clean-windows

  clean-linux:
    internal: true
    platforms: [linux]
    ignore_error: true # ignore error if not found
    cmds:    
      - rm -rf .task/
      - rm parser/y.output

  clean-windows:
    internal: true
    platforms: [windows]
    ignore_error: true # ignore error if not found
    cmds:    
      - Powershell Remove-Item .task -Recurse 
      - Powershell Remove-Item parser/y.output

  generate:
    desc: (re)generate all files
    sources: 
      - ./**/*.y   
    generates: # what triggers rebuild
      - ./**/parser/y.output
      - ./**/parser/parser.go
    cmds:
      - go generate ./...

  gsc:
    desc: call the gsc command line (arguments after -- will be passed to gsc)
    deps: [build]
    method: "none"  # always run the task, even if it's up-to-date
    cmds:
      - bin/gsc-{{.VERSION}}{{.EXE}} {{.CLI_ARGS}}